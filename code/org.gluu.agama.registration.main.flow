// User Registration Techniques
Flow org.gluu.agama.registration.main
     Basepath ""
     Timeout 700 seconds
     Configs conf
// Create  variable for UI feedback
uiFeedback = {}
uiFeedback.errorMessage = ""
emailObj = {}
sendMail = true
uiInput = {matches: true, resent: false}
// Iterate x times max
Repeat 6 times max
     // Retrieve user profile  from UI
     userInput = RRF "profile.ftlh" uiFeedback
     // create an instance of Registration service
     userRegistrationService = Call org.gluu.agama.user.UserRegistration#getInstance conf 
     // Assign userName, email and password  to a variable
     email = userInput.mail
     userName = userInput.uid
     referralCode = userInput.referralCode
     residenceCountry = userInput.residenceCountry
     phone = userInput.phoneNumber
     // sent sms otp
     smsOtpSend = Call userRegistrationService sendOTPCode phone 
     // The OTP Code has been send to user.
     Log "@info OTP generated and send to: " phone
     otpValidationResult = false
     max = Repeat 3 times max
          // Show UI to collect OTP code from user.
          otpCreds = RRF "smsOtp.ftlh" uiFeedback
          // Add log entry with collected code in log file.
          Log "@info Information provided by the user is : " otpCreds.code
          // Validate the OTP code provided by the user.
          otpValidationResult = Call userRegistrationService validateOTPCode phone otpCreds.code 
          // Add log entry with validation result in log file.
          Log "@info OTP validation result is:" otpValidationResult
          Quit When otpValidationResult is true
          // The maximum number of attempt has been reached.
          Log "@error Invalid code provided "
          // Provide feedback to user.
          uiFeedback.errorMessage = "Invalid code provided."
     Log "@info OTP verification loop completed"
     isPhoneVerified = otpValidationResult
     // Check if OTP validation was okay
     When isPhoneVerified is true
          uiFeedback.errorMessage = null
          // check user name policy
          isUsernamePolicyMatch = Call userRegistrationService usernamePolicyMatch userName
          // if username policy match
          When isUsernamePolicyMatch is true
               // Check user already exist or not with mail
               user = Call userRegistrationService getUserEntityByMail email
               // If user not found
               When user.empty is true
               // Check user already exist or not with username
               userWithUid = Call userRegistrationService getUserEntityByUsername userName
          Otherwise
               // Name should contain only alphabets
               uiFeedback.errorMessage = "Name should contain only alphabets"
// Maximum attempt reached
Log "@info Maximum attempt reached"
// User Registration flow failed
it_rmise = {success:false, error: "User registration flow reached max attempts try later"}
Finish it_rmise